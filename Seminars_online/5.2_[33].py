# №5.2[33]. Хакер Василий получил доступ к классному журналу 
# и хочет заменить все свои минимальные оценки на максимальные.
# Напишите функцию, которая заменяет оценки, переданные в виде списка, но наоборот: все максимальные – на минимальные.
# Функция должна возвращать новый список оценок

# Примечание: Обратите внимание на side effects функции.

# Примеры/Тесты:
# <function_name>([1, 3, 3, 3, 4, 2, 5, 5, 2]) -> [1, 3, 3, 3, 4, 2, 1, 1, 2]
# [*] Усложненение: Если ни одна оценка не была заменена, функция должна вернуть None

# Примеры/Тесты:
# <function_name>([3, 3, 3, 3, 3, 3, 3, 3, 3]) -> None

# [**] Усложненение: Добавьте параметр в функцию, который определит как будут заменены оценки:

# Друзьям минимальные на максимальные, Врагам - наоборот.

# Примеры/Тесты:

# <function_name>(vasya_grades, "friend") -> [5, 3, 3, 3, 4, 2, 5, 5, 2]

# <function_name>(vasya_grades, "enemy") -> [1, 3, 3, 3, 4, 2, 1, 1, 2]


def grade(list_1):
    new_grades = list_1.copy()
    min_grade = min(new_grades)
    max_grade = max(new_grades)
    for i in range(len(new_grades)):
        if new_grades[i] == max_grade:
            new_grades[i] = min_grade
    return new_grades
    
list_2 = [1, 3, 3, 3, 4, 2, 5, 5, 2]
print(list_2)

result_list = grade(list_2)
    
print(result_list)
print(list_2)

# Результат от print(list_2) выводится такой же как в предыд. стр.: print(result_list)
# А почему, ведь в print(list_2) после list_2 = [1, 3, 3, 3, 4, 2, 5, 5, 2] список выводится другой
# Почему list_2 меняется.
# Это называется Side effect (Сторонний эффект)
# Что меняет внешний контекст функции - стр. 34-40
# Внутр. контекст - стр. 27-32 (тело функции)

# Мы меняем list_1[i] = min_grade элемент списка в функции, 
# но это действие меняет весь список и вне функции.
# Это неправильно!
# При работе с мутабельными объектами нужно быть осторожными.
# Для этого добавим new_grades = list_1.copy
# Т.е.как говорил Виталий по Сишарпу - не нужно менять исходный список (массив) - 
# нужно создавать новый как копию исходного и новый переделывать!

print(' ')

# [*] Усложненение: Если ни одна оценка не была заменена, функция должна вернуть None
# Примеры/Тесты:
# <function_name>([3, 3, 3, 3, 3, 3, 3, 3, 3]) -> None



def grade(list_1):
    new_grades = list_1.copy()
    min_grade = min(new_grades)
    max_grade = max(new_grades)
    
    if min_grade == max_grade:
        return None
        
    for i in range(len(new_grades)):
        if new_grades[i] == max_grade:
            new_grades[i] = min_grade
    
    return new_grades
    
    
    
# list_2 = [1, 3, 3, 3, 4, 2, 5, 5, 2]
list_2 = [3, 3, 3, 3, 3, 3, 3, 3, 3]
print(list_2)

result_list = grade(list_2)
    
print(result_list)
