# 4.1[22]: Даны два неупорядоченных набора целых чисел (может быть, с повторениями). 
# Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах. 
# Если таких чисел нет - выдать внятное диагностическое сообщение

# Наборы (списки) чисел можно считать заданными и не вводить с клавиатуры

# Примеры/Тесты:
# Input1: 2 4 6 8 10 12 10 8 6 4 2
# Input2: 3 6 9 12 15 18
# Output: 6 12     Обратите внимание: Без скобочек, в одну строку

# Input1: 2 4 6 8 10 10 8 6 4 2
# Input2: 3 9 12 15 18
# Output: Повторяющихся чисел нет


# Решение через множества

# set_1 = {2, 4, 6, 8, 10, 12, 10, 8, 6, 4, 2}
set_1 = {2, 4, 6, 8, 10, 10, 8, 6, 4, 2}
# set_2 = {3, 6, 9, 12, 15, 18}
set_2 = {3, 9, 12, 15, 18}

# print(set_1, set_2)
if set_2.intersection(set_1):
    # print(result_set)
    print(*sorted(result_set))
else:
    print('Повторяющихся чисел нет')



# циклом пройти по первому списку 
# берем 1-й элемент списка1 и сравниваем его со значениями списка2 (вложенный цикл?)
# Если значение элементов совпадает, то записываем его в спписок3
# Сортируем список3 по возрастанию.
# Если совпадений нет то список 3 не наполнится - его длина будет равна 0:
# Проверяем, если длина списка3 == 0, то пишем "Повторяющихся чисел нет"
# Если > 0, то сортируем Список3 по возрастанию

# Решение через списки:
# (в связи с наличием повторяющихся элементов)

print(' ')


# list_1 = [2, 4, 6, 8, 10, 12, 10, 8, 6, 4, 2]
list_1 = [2, 4, 6, 8, 10, 10, 8, 6, 4, 2]
# list_2 = [3, 6, 9, 12, 15, 18]
list_2 = [3, 9, 12, 15, 18]

set_3 = set()

for element_from_list_1 in list_1:
  for element_from_list_2 in list_2:
    if element_from_list_1 == element_from_list_2:
      set_3.add(element_from_list_1)
      
# print(set_3)                   # для проверки и наглядности при тестировании

if len(set_3) == 0:
  print('Повторяющихся чисел нет')
else:
  print(*sorted(set_3))



# В Python, вы можете сортировать список с помощью встроенного в list.sort () метод или встроенный в sorted () функцию. 
# Функция sorted () создает новый отсортированный список, а метод list.sort () сортирует список на месте. 
# Если вы хотите сохранить, несортированный список используйте функцию sorted (). 
# Еще одно отличие состоит в том, что функция sorted sorted () работает с любым итерируемым объектом.

