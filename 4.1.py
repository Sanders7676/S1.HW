# 4.1[22]: Даны два неупорядоченных набора целых чисел (может быть, с повторениями). 
# Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах. 
# Если таких чисел нет - выдать внятное диагностическое сообщение

# Наборы (списки) чисел можно считать заданными и не вводить с клавиатуры

# Примеры/Тесты:
# Input1: 2 4 6 8 10 12 10 8 6 4 2
# Input2: 3 6 9 12 15 18
# Output: 6 12     Обратите внимание: Без скобочек, в одну строку

# Input1: 2 4 6 8 10 10 8 6 4 2
# Input2: 3 9 12 15 18
# Output: Повторяющихся чисел нет



list_1 = [2 4 6 8 10 12 10 8 6 4 2]
list_2 = [3 6 9 12 15 18]

# циклом пройти по первому списку 
# берем 1-й элемент списка1 и сравниваем его со значениями списка2 (вложенный цикл?)
# Если значение элементов совпадает, то записываем его в спписок3
# Сортируем список3 по возрастанию.
# Если совпадений нет то список 3 не наполнится - его длина будет равна 0:
# Проверяем, если длина списка3 == 0, то пишем "Повторяющихся чисел нет"
# Если > 0, то сортируем Список3 по возрастанию

list_3 = []

for element_from_list_1 in list_1:
  for element_from_list_2:
    if element_from_list_1 == element_from_list_2:
      list_3.append(element_from_list_1)
      
print(list_3)                   # для проверки и наглядности при тестировании
print(list_3.sort())            # тоже для проверки

# В Python, вы можете сортировать список с помощью встроенного в list.sort () метод или встроенный в sorted () функцию. 
# Функция sorted () создает новый отсортированный список, а метод list.sort () сортирует список на месте. 
# Если вы хотите сохранить, несортированный список используйте функцию sorted (). 
# Еще одно отличие состоит в том, что функция sorted sorted () работает с любым итерируемым объектом.

if len(list_3) == 0:
  print('Повторяющихся чисел нет')
else:
  print(*set(list_3.sort()))           # Посмотреть как лист переделать в сет (было в семинарах) и как печатать без скобок (*)
